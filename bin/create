#!/usr/bin/env node
const path=require('path')
const userHome=require('user-home')
const exists = require('fs').existsSync
const inquirer=require('inquirer')
const download=require('download-git-repo')
const chalk=require('chalk')
const ora=require('ora')
const rm = require('rimraf').sync
const checkVersion=require('../lib/check-version.js')
const fetchTemplateList=require('../lib/fetch-template-list')
const generate=require('../lib/generate-project')

//检测版本并执行Main函数
checkVersion(()=>{
  Main()
})

/**
 * Main
 */
function Main(){
  //本地模板存放仓库
  const tmpRepo=path.resolve(userHome,'.jsl-templates')
  //获取模板列表
  fetchTemplateList((templateList)=>{
    const choices=templateList.map(template=>{
      return {
        name:`${template.name} - ${template.description}`,
        value:template.name
      }
    })
    inquirer.prompt([{
      type:'list',
      name:'template',
      choices,
      message:'Choose template you want'
    }]).then(answer=>{
      //模板名称
      const tmpName=answer.template
      //远程模板地址
      const tmpUrl=templateList.find(template=>template.name===tmpName).url
      const tmpDest=path.join(tmpRepo,tmpName)
      if(exists(tmpDest)){
        inquirer.prompt([
          {
            type:'confirm',
            name:'override',
            message:'The template exists.Override?'
          }
        ]).then(answer=>{
          if(answer.override) {
            rm(tmpDest)
            downloadAndGenerate(tmpRepo,tmpName,tmpUrl)
          }else{
            generate(tmpDest,tmpName,tmpUrl)
          }
        });
      }else{
        downloadAndGenerate(tmpRepo,tmpName,tmpUrl)
      }
    })
  })
}
/**
 *
 * @param {String} tmpRepo
 * @param {String} tmpName
 * @param {String} tmpUrl
 */
function downloadAndGenerate(tmpRepo,tmpName,tmpUrl){
  const spinner=ora('downloading template...')
  const tmpDest=path.join(tmpRepo,tmpName)
  // spinner.start()
  download(`${tmpUrl}`,tmpDest,{
    clone:true
  },(err)=>{
    spinner.start()
    if(err){
      spinner.fail(chalk.red('download template unsuccessfully'))
      console.log(err)
    }else{
      spinner.succeed(chalk.green('download template successfully(项目在发布测试阶段时需要手动的去替换yaml文件中的token值,找对应的权限负责人申请该模块的项目token)'))
      generate(tmpDest,tmpName,tmpUrl)
    }
  })
}


