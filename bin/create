#!/usr/bin/env node

const path = require('path')
const userHome = require('user-home')
const exists = require('fs').existsSync
const inquirer = require('inquirer')
const download = require('download-git-repo')
const chalk = require('chalk')
const ora = require('ora')
const rm = require('rimraf').sync
const Metalsmith = require('metalsmith')
const inquirer = require('inquirer')
const chalk = require('chalk')
const path = require('path')
const ora = require('ora')
const exists = require('fs').existsSync
const rm = require('rimraf').sync

/**
 * @description 获取绝对路径
 */
function getAbsolutePath (localPath) {
  if(typeof localPath === 'string'){
    return path.isAbsolute(localPath)?localPath:path.join(process.cwd(),localPath)
  }
  return localPath;
}

/**
 * @description 生成项目
 */
function generateProject (tmpPath, tmpName, tmpUrl) {
  const metalsmith = Metalsmith(tmpPath)
  inquirer.prompt([{
      type: 'input',
      name: 'name',
      message: 'The name of project',
      default: 'my_app'
    },
    {
      type: 'input',
      name: 'destination',
      message: 'The destination of project',
      default: process.cwd()
    }
  ]).then(answer => {
    //项目生成路径
    const destination = path.join(getAbsolutePath(answer.destination), answer.name)
    if (exists(destination)) {
      rm(destination)
    }
    const spinner = ora('generating...').start()
    //加入新的全局变量
    Object.assign(metalsmith.metadata(), answer)
    spinner.start()
    metalsmith
      .source('.')
      .destination(destination)
      .clean(true)
      .build(function (err, files) {
        console.log()
        spinner.stop()
        if (err) {
          console.warn('err', err)
          throw err
        }
        console.log()
        console.log(chalk.green('Build Successfully'))
        console.log()
        console.log((`${chalk.green('Please cd')} ${destination} ${chalk.green('to start your coding')}`))
        console.log()
      })
  })
}

const templateList = [
  {
    "name":"phaser",
    "url":"direct:https://github.com/atbulbs/phaser_template.git",
    "description":"a phaser template"
  },
  {
    "name":"vue",
    "url":"direct:https://github.com/atbulbs/all_in_typescript.git",
    "description":"a vue template"
  },
]

//本地模板存放仓库
const tmpRepo = path.resolve(userHome, '.jsl-templates')
//获取模板列表
const choices = templateList.map(template => {
  return {
    name: `${template.name} - ${template.description}`,
    value: template.name
  }
})

inquirer.prompt([{
  type: 'list',
  name: 'template',
  choices,
  message: 'Choose template you want'
}]).then(answer => {
  //模板名称
  const tmpName = answer.template
  //远程模板地址
  const tmpUrl = templateList.find(template => template.name === tmpName).url
  const tmpDest = path.join(tmpRepo, tmpName)
  if (exists(tmpDest)) {
    inquirer.prompt([{
      type: 'confirm',
      name: 'override',
      message: 'The template exists.Override?'
    }]).then(answer => {
      if (answer.override) {
        rm(tmpDest)
        downloadAndGenerate(tmpRepo, tmpName, tmpUrl)
      } else {/**
       * @description 生成项目
       */
        generateProject(tmpDest, tmpName, tmpUrl)
      }
    });
  } else {
    downloadAndGenerate(tmpRepo, tmpName, tmpUrl)
  }
})

/**
 *
 * @param {String} tmpRepo
 * @param {String} tmpName
 * @param {String} tmpUrl
 */
function downloadAndGenerate(tmpRepo, tmpName, tmpUrl) {
  const spinner = ora('downloading template...')
  const tmpDest = path.join(tmpRepo, tmpName)
  spinner.start()
  download(`${tmpUrl}`, tmpDest, {
    clone: true
  }, (err) => {
    spinner.start()
    if (err) {
      spinner.fail(chalk.red('download template unsuccessfully'))
      console.log(err)
    } else {
      spinner.succeed/**
       * @description 生成项目
       */(chalk.green('download template successfully'))
      generateProject(tmpDest, tmpName, tmpUrl)
    }
  })
}
